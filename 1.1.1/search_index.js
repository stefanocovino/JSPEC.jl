var documenterSearchIndex = {"docs":
[{"location":"#JSPEC","page":"Home","title":"JSPEC","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for JSPEC.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#JSPEC.Angstrom2KeV-Tuple{Any}","page":"Home","title":"JSPEC.Angstrom2KeV","text":"Angstrom2KeV(wave)\n\nConvert wavelengths in Angstrom (10^-8m) to keV.\n\n#Arguments\n\nwave the input wavelengths.\n\nExamples\n\n\nAngstrom2KeV(5000:5005)\n\n# output\n\n6-element Vector{Float64}:\n 0.00248\n 0.002479504099180164\n 0.0024790083966413435\n 0.0024785128922646415\n 0.0024780175859312552\n 0.0024775224775224775\n\n\n\n\n\n","category":"method"},{"location":"#JSPEC.CreateDataSet-Tuple{String, String}","page":"Home","title":"JSPEC.CreateDataSet","text":"CreateDataSet(Name::String, Instrument::String; verbose=true)::Dict\n\nCreate a JSPECDataSent entry.\n\n#Arguments\n\nName is the arbitrary name of the dataset.\nInstrument is one of supperted instrument by the package.\nverbose enables warning messages.\n\nExamples\n\n\nnewdataset = CreateDataSet(\"XRTTest\",\"Swift-XRT\")\n\n# output\n\nDict{Any, Any} with 3 entries:\n  \"Name\"       => \"XRTTest\"\n  \"Instrument\" => \"Swift-XRT\"\n  \"Created\"    => true\n\n\n\n\n\n","category":"method"},{"location":"#JSPEC.FindRebinSchema-Tuple{AbstractVector{Float64}, AbstractVector{Float64}}","page":"Home","title":"JSPEC.FindRebinSchema","text":"FindRebinSchema(x,ey;minSN=5)::AbstractVector{Real}\n\nCompute the rebin schema to guarantee that the S/N is at least minSN in each bin (or channel).\n\nArguments\n\nx input array.\nex uncertainties.\n\nExamples\n\n\nx = [1.,2.,3.,4.,]\nex = [0.1,0.5,0.6,0.05]\n\nJSPEC.FindRebinSchema(x,ex)\n\n# output\n\n3-element Vector{Real}:\n 1\n 3\n 4\n\n\n\n\n\n\n","category":"method"},{"location":"#JSPEC.GenFullObsData-Tuple{Any}","page":"Home","title":"JSPEC.GenFullObsData","text":"GenFullObsData(datasets;verbose=true)\n\nGneerate input data basing on the available datasets.\n\nArguments\n\ndatasets array of JSPEC dictionaries.\nverbose enable warning message.\n\nIt reports three arrays: inputdata, error on inputdata, input energies.\n\nExamples\n\nGenFullObsData([dataset1, dataset2])\n\n\n\n\n\n","category":"method"},{"location":"#JSPEC.GenRebin-Tuple{Any, Any}","page":"Home","title":"JSPEC.GenRebin","text":"GenRebin(x,rebs)::AbstractVector{Real}\n\nRebin input data following a given rebin schema.\n\nArguments\n\nx input array.\nrebs array with rebin schema.\n\nExamples\n\n\nx = [1.,2.,3.,4.,]\nrbs = [1,3,4]\n\nJSPEC.GenRebin(x,rbs)\n\n# output\n\n3-element Vector{Real}:\n 1.0\n 2.5\n 4.0\n\n\n\n\n\n","category":"method"},{"location":"#JSPEC.GenResponseMatrix-Tuple{Dict}","page":"Home","title":"JSPEC.GenResponseMatrix","text":"GenResponseMatrix(ds::Dict; verbose=true)\n\nGenerate a rebinned response matrix following the rebin schema identified for input data.\n\nArguments\n\nds JSPEC data set dictionary.\n\nExamples\n\n\nGenResponseMatrix(newdataset)\n\n\n\n\n\n\n","category":"method"},{"location":"#JSPEC.GetKnownInstruments-Tuple{}","page":"Home","title":"JSPEC.GetKnownInstruments","text":"GetKnownInstruments()\n\nReturns the instruments currently supported by the JSPEC package.\n\nExamples\n\n@show GetKnownInstruments()\n\n\n\n\n\n","category":"method"},{"location":"#JSPEC.IgnoreChannels-Tuple{Dict, Any}","page":"Home","title":"JSPEC.IgnoreChannels","text":"IgnoreChannels(ds:Dict, chns; verbose=true)\n\nIgnore channels in the input data.\n\nArguments\n\nds JSPEC data set dictionary.\nchns vector of channels to be ignored,   e.g. [0,1,2,3] or even [0:4, 1000:1023]. Pay attention that channel numbering starts at 0.\nverbose enables warning messages.\n\nExamples\n\n\nIgnoreChannels(newdataset,[0,1,2,3])\n\n\n\n\n\n","category":"method"},{"location":"#JSPEC.ImportData-Tuple{Dict}","page":"Home","title":"JSPEC.ImportData","text":"ImportData(ds::Dict; rmffile::String=\"\", arffile::String=\"\", srcfile::String=\"\", bckfile::String=\"\", verbose=true)\n\nImport data from \"multi-channel\" instruments (e.g., Swift-XRT).\n\nArguments\n\nds` JSPEC data set dictionary.\nrmfile` RMF response matrix.\narffile effective area matrix.\nsrcfile source counts (or rate).\nbckfile background counts (or rate).\nverbose enables warning messages.\n\nExamples\n\nfnrmf = joinpath(\"data\",\"wt.rmf\")\nfnarf = joinpath(\"data\",\"wt.arf\")\nfnpisrc = joinpath(\"data\",\"wtsource.pi\")\nfnpibck = joinpath(\"data\",\"tback.pi\");\n\nImportData(newdataset, rmffile=fnrmf,arffile=fnarf,srcfile=fnpisrc,bckfile=fnpibck)\n\n\n\n\n\n","category":"method"},{"location":"#JSPEC.ImportOtherData-Tuple{Dict, Any, Any, Any}","page":"Home","title":"JSPEC.ImportOtherData","text":"ImportOtherData(ds::Dict, energy, phflux, ephflux; bandwidth=1., verbose=true)\n\nImport data already in physical units.\n\nArguments\n\nds JSPEC dictionary.\nenergy input energy (KeV).\nphflux photon flux density (photonscm^-2s^-1KeV^-1).\nephflux photon flux density uncertainty.\nbandwidth band width (KeV).\nverbose enable warning message.\n\nBandwidth is needed only in case photon flux (photonscm^-2s^-1), rather then photon flux density, is provided.\n\nExamples\n\nImportOtherData(newdataset, [1.,2.,3.,4], [0.1,0.2,0.3,0.4], [0.01,0.02,0.03,0.04])\n\n\n\n\n\n","category":"method"},{"location":"#JSPEC.JSPECFunc-Tuple{Any, Any, Any}","page":"Home","title":"JSPEC.JSPECFunc","text":"JSPECFunc(pars,dts,inpfnc)\n\nConvolve the output of the inpfnc function with the responce matrices of the imported data.\n\nArguments\n\npars parameters for the inpfnc function.\ndts array of JSPEC dictionaries.\ninpfnc function to model the imported data.\n\ninpfnc can be any legal Julia function. THe function should be declared as in the following example.\n\nExamples\n\n\nfunction Myfunc(pars,Energy)\n    N, λ = pars\n    return anyfunc(E,N,λ)\nend\n\nJSPECFunc([N,λ], [Optdt,XRTdt], Myfunc)\n\n\n\n\n\n","category":"method"},{"location":"#JSPEC.Jy2PhFlux-Tuple{Any, Any}","page":"Home","title":"JSPEC.Jy2PhFlux","text":"Jy2PhFlux(energy,jyspectrum)\n\nConvert an input sectrum in Jy to phs^-1cm^-2KeV^-1.\n\nArguments\n\nenergy input energy of the spectrum in KeV.\njyspectrum input spectrum in Jy.\n\nExamples\n\n```jldoctest\n\ne = [1.,2.,3.,4.,] sp = [1e-3,3e-3,4e-3,5e-3]\n\nJy2PhFlux(e,sp)\n\noutput\n\n4-element Vector{Float64}:  1.51  2.265  2.013333333333333  1.8875\n\n\n\n\n\n","category":"method"},{"location":"#JSPEC.KeV2Angstrom-Tuple{Any}","page":"Home","title":"JSPEC.KeV2Angstrom","text":"KeV2Angstrom(energy)\n\nConvert photon energy (KeV) to wavelengths in Angstrom (10^-8m).\n\n#Arguments\n\nenergy the input photon energy.\n\nExamples\n\n\nKeV2Angstrom(1:3)\n\n# output\n\n0.08064516129032258:0.08064516129032258:0.24193548387096775\n\n\n\n\n\n","category":"method"},{"location":"#JSPEC.KeV2Channel-Tuple{Dict, Any}","page":"Home","title":"JSPEC.KeV2Channel","text":"KeV2Channel(ds::Dict, energy)\n\nConvert photon energy (KeV) to original detector channel.\n\n#Arguments\n\nds JSPEC dictionary.\nenergy the input photon energy.\n\nIt returns -1 if the energy is not in the covered range.\n\nExamples\n\n\nKeV2Channel(ds,1.2)\n\n# output\n\n11\n\n\n\n\n\n","category":"method"},{"location":"#JSPEC.PlotRaw-Tuple{Dict}","page":"Home","title":"JSPEC.PlotRaw","text":"PlotRaw(ds:Dict; xlbl=\"Channels\", ylbl=\"Counts\", tlbl=ds.Name, verbose=true)::Figure\n\nDraw a plot of the raw input data.\n\nArguments\n\nds JSPEC data set dictionary.\nxlbl x-axis label.\nylbl y-axis label.\ntlbl plot title.\nverbose enables warning messages.\n\nExamples\n\nfigraw = PlotRaw(newdataset)\n\n\n\n\n\n","category":"method"},{"location":"#JSPEC.PlotRebinned-Tuple{Dict}","page":"Home","title":"JSPEC.PlotRebinned","text":"PlotRebinned(ds:Dict; xlbl=\"Channels\", ylbl=\"Counts\", tlbl=ds.Name, verbose=true)::Figure\n\nDraw a plot of the rebinned input data.\n\nArguments\n\nds JSPEC data set dictionary.\nxlbl x-axis label.\nylbl y-axis label.\ntlbl plot title.\nverbose enables warning messages.\n\nExamples\n\nfigreb = PlotRebinned(newdataset)\n\n\n\n\n\n","category":"method"},{"location":"#JSPEC.RebinAncillaryData-Tuple{Dict}","page":"Home","title":"JSPEC.RebinAncillaryData","text":"RebinAncillaryData(ds::Dict; verbose=true)\n\nRebin ancillary data (channels, channel energy, etc.) with the rebin schema identified for input data.\n\nArguments\n\nds JSPEC data set disctionary.\nverbose enables warning messages.\n\nExamples\n\n\nRebinAncilaryData(newdataset)\n\n\n\n\n\n\n","category":"method"},{"location":"#JSPEC.RebinData-Tuple{Dict}","page":"Home","title":"JSPEC.RebinData","text":"RebinData(ds::Dict;minSN=5,verbose=true)\n\nRebin input data with a mininum S/N per bin.\n\nArguments\n\nds JSPEC data set disctionary.\nminSN minimum S/N per bin.\nverbose enables warning messages.\n\nExamples\n\n\nRebinData(newdataset)\n\n\n\n\n\n\n","category":"method"}]
}
