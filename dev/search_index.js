var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = JSPEC","category":"page"},{"location":"#JSPEC","page":"Home","title":"JSPEC","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for JSPEC.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [JSPEC]","category":"page"},{"location":"#JSPEC.CreateDataSet-Tuple{String, String}","page":"Home","title":"JSPEC.CreateDataSet","text":"CreateDataSet(Name::String, Instrument::String; verbose=true)::Dict\n\nCreate a JSPECDataSent entry. \n\n#Arguments\n\nName is the arbitrary name of the dataset.\nInstrument is one of supperted instrument by the package. \nverbose enables warning messages.\n\nExamples\n\n\nnewdataset = CreateDataSet(\"XRTTest\",\"Swift-XRT\")\n\n# output\n\nDict{Any, Any} with 3 entries:\n  \"Name\"       => \"XRTTest\"\n  \"Instrument\" => \"Swift-XRT\"\n  \"Created\"    => true\n\n\n\n\n\n","category":"method"},{"location":"#JSPEC.FindRebinSchema-Tuple{AbstractVector{Float64}, AbstractVector{Float64}}","page":"Home","title":"JSPEC.FindRebinSchema","text":"FindRebinSchema(x,ey;minSN=5)::AbstractVector{Real}\n\nCompute the rebin schema to guarantee that the S/N is at least 'minSN' in each bin (or channel). 'x' and 'ex' are the input data and relative uncertainties.\n\nExamples\n\n\nx = [1.,2.,3.,4.,]\nex = [0.1,0.5,0.6,0.05]\n\nJSPEC.FindRebinSchema(x,ex)\n\n# output\n\n3-element Vector{Real}:\n 1\n 3\n 4\n\n\n\n\n\n\n","category":"method"},{"location":"#JSPEC.GenRebin-Tuple{Any, Any}","page":"Home","title":"JSPEC.GenRebin","text":"GenRebin(x,rebs)::AbstractVector{Real}\n\nRebin input data following a given rebin schema.\n\nExamples\n\n\nx = [1.,2.,3.,4.,]\nrbs = [1,3,4]\n\nJSPEC.GenRebin(x,rbs)\n\n# output\n\n3-element Vector{Real}:\n 1.0\n 2.5\n 4.0\n\n\n\n\n\n\n","category":"method"},{"location":"#JSPEC.GetKnownInstruments-Tuple{}","page":"Home","title":"JSPEC.GetKnownInstruments","text":"GetKnownInstruments()\n\nReturns the instruments currently supported by the JSPEC package.\n\nExamples\n\n@show GetKnownInstruments()\n\n\n\n\n\n","category":"method"},{"location":"#JSPEC.IgnoreChannels-Tuple{Dict, Any}","page":"Home","title":"JSPEC.IgnoreChannels","text":"IgnoreChannels(ds:Dict, chns; verbose=true)\n\nIgnore channels in the input data. 'ds' is the JSPEC data set dictionary, 'chns' is a vector of channels to be ignored, e.g. [0,1,2,3] or even [0:4, 1000:1023]. Please remeber that channel numebering starts with 0. If 'verbose' is set, it generates, if needed, a warning message if data are now properly processed.\n\nExamples\n\nIgnoreChannels(newdataset,[0,1,2,3])\n\n\n\n\n\n","category":"method"},{"location":"#JSPEC.ImportData-Tuple{Dict}","page":"Home","title":"JSPEC.ImportData","text":"ImportData(ds::Dict; rmffile::String=\"\", arffile::String=\"\", srcfile::String=\"\", bckfile::String=\"\", verbose=true)\n\nImport data from \"multi-channel\" instruments (e.g., Swift-XRT) as FITS files and add fields to the JSPECDataSet dictionary. 'ds' is the JSPEC data set dictionary, 'rmfile' is the RMF response matrix, 'arffile' the effective area matrix, 'srcfile' the counts (or rates) for the source, and 'bckfile' the counts or rates for the background. If 'verbose' is set, it generates, if needed, a warning message if data are now properly processed.\n\nExamples\n\nfnrmf = joinpath(\"data\",\"wt.rmf\")\nfnarf = joinpath(\"data\",\"wt.arf\")\nfnpisrc = joinpath(\"data\",\"wtsource.pi\")\nfnpibck = joinpath(\"data\",\"tback.pi\");\n\nImportData(newdataset, rmffile=fnrmf,arffile=fnarf,srcfile=fnpisrc,bckfile=fnpibck)\n\n\n\n\n\n","category":"method"},{"location":"#JSPEC.ImportOtherData-Tuple{Dict, Any, Any, Any}","page":"Home","title":"JSPEC.ImportOtherData","text":"ImportOtherData(ds::Dict, energy, phflux, ephflux; bandwidth=1., verbose=true)\n\nImport data already in physical units, 'ds' is a JEPC dictionary, 'energy' is KeV, 'phflux' is the corresponding photon flux density in photons cm^-2 s^-1 KeV^-1 and 'ephflux' the uncertainty. In case it is a photon flux (photons cm^-2 s^-1) the with, in KeV, of the band, 'bandwidth' must be provided. If 'verbose' is set, it generates, if needed, a warning message if data are now properly processed.\n\nExamples\n\nImportOtherData(newdataset, [1.,2.,3.,4], [0.1,0.2,0.3,0.4], [0.01,0.02,0.03,0.04])\n\n\n\n\n\n","category":"method"},{"location":"#JSPEC.PlotRaw-Tuple{Dict}","page":"Home","title":"JSPEC.PlotRaw","text":"PlotRaw(ds:Dict; xlbl=\"Channels\", ylbl=\"Counts\", tlbl=ds.Name, verbose=true)::Figure\n\nDraw a plot of the raw input data. 'ds' is the JSPEC data set dictionary, 'xlbl' and 'ylbl' are the labels for the x and y axes, whule 'tlbl' is the plot title. If 'verbose' is set, it generates, if needed, a warning message if data are now properly processed.\n\nExamples\n\nfigraw = PlotRaw(newdataset)\n\n\n\n\n\n","category":"method"},{"location":"#JSPEC.PlotRebinned-Tuple{Dict}","page":"Home","title":"JSPEC.PlotRebinned","text":"PlotRebinned(ds:Dict; xlbl=\"Channels\", ylbl=\"Counts\", tlbl=ds.Name, verbose=true)::Figure\n\nDraw a plot of the raw input data. 'ds' is the JSPEC data set dictionary, 'xlbl' and 'ylbl' are the labels for the x and y axes, whule 'tlbl' is the plot title. If 'verbose' is set, it generates, if needed, a warning message if data are now properly processed.\n\nExamples\n\nfigreb = PlotRebinned(newdataset)\n\n\n\n\n\n","category":"method"},{"location":"#JSPEC.RebinAncillaryData-Tuple{Dict}","page":"Home","title":"JSPEC.RebinAncillaryData","text":"RebinAncillaryData(ds::Dict; verbose=true)\n\nRebin ancillary data (channels, channel energy, etc.) with the rebin schema identified for input data.\n\nExamples\n\n\nRebinAncilaryData(newdataset)\n\n\n\n\n\n\n","category":"method"},{"location":"#JSPEC.RebinData-Tuple{Dict}","page":"Home","title":"JSPEC.RebinData","text":"RebinData(ds::Dict;minSN=5,verbose=true)\n\nRebin input data with a given mininum S/N per bin. If 'verbose' is set, it generates, if needed, a warning message if data are now properly processed.\n\nExamples\n\n\nRebinData(newdataset)\n\n\n\n\n\n\n","category":"method"}]
}
